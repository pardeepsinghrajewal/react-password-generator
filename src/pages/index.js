import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useState } from 'react'
import { useCallback } from 'react'
import { useEffect } from 'react'
import { useRef } from 'react'


const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [password, setPassword] = useState('');
  const [length, setLength] = useState(8);
  const [numberAllowed, setNumberAllowed] = useState(false);
  const [SpecialCharAllowed, setSpecialCharAllowed] = useState(false)

  const passRef = useRef(null);

  const passwordGenerator = useCallback(() => 
  {

    let pass = '';
    let text = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    if(numberAllowed)
    {
      text += '1234567890';
    }
    if(SpecialCharAllowed)
    { 
      text += '!@#$%^&*()_+';
    }

    for (let i = 0; i < length; i++) 
    {
      let index = Math.floor((Math.random() * text.length) + 1);  
      pass += text[index]
    }
    setPassword(pass);
  }, [length,numberAllowed,SpecialCharAllowed]);


  useEffect(()=>{
    passwordGenerator();
  },[length,numberAllowed,SpecialCharAllowed])

  const copyPassToClipBoard = () => {
    navigator.clipboard.writeText(password);
    passRef.current.select();

  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <div className={styles.passwordGenerator}>
          <input type='text' value={password} readOnly ref={passRef}/>
          <button onClick={copyPassToClipBoard}>Copy</button><br/>
          length({length}) <input type='range' min="4" max="16" 
          onChange={(e)=>{setLength(e.target.value)}}/><br/>

          Use Number <input type="checkbox" checked={numberAllowed} onChange={()=> 
          {
            setNumberAllowed((prev)=> !prev)
          }} /> <br/>

          use Special Char <input type="checkbox" checked={SpecialCharAllowed} onChange={()=> 
            {
              setSpecialCharAllowed((prev)=> !prev)
            }}/>
        </div>
      </main>
    </>
  )
}
